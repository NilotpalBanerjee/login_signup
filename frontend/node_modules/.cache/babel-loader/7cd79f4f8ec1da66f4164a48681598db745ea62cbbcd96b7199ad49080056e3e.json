{"ast":null,"code":"const express = require('express');\nconst mysql = require('mysql2');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst twilio = require('twilio');\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\n\n// Twilio configuration\nconst accountSid = 'your_twilio_account_sid';\nconst authToken = 'your_twilio_auth_token';\nconst client = twilio(accountSid, authToken);\n\n// Create database connection\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'signup'\n});\n\n// Connect to the database\ndb.connect(err => {\n  if (err) {\n    console.error('Database connection error:', err);\n    return;\n  }\n  console.log('Connected to the database');\n});\n\n// Store OTP in memory (for simplicity, use a better approach in production)\nlet otpStore = {};\n\n// Endpoint to request OTP\napp.post('/request-otp', (req, res) => {\n  const {\n    mobile_no\n  } = req.body;\n\n  // Generate random OTP\n  const otp = Math.floor(100000 + Math.random() * 900000);\n\n  // Save OTP for verification\n  otpStore[mobile_no] = otp;\n\n  // Send OTP via Twilio\n  client.messages.create({\n    body: `Your OTP code is ${otp}`,\n    from: 'your_twilio_phone_number',\n    to: mobile_no\n  }).then(message => {\n    console.log('OTP sent', message.sid);\n    res.json({\n      success: true,\n      message: 'OTP sent successfully'\n    });\n  }).catch(err => {\n    console.error('Error sending OTP:', err);\n    res.json({\n      success: false,\n      message: 'Error sending OTP'\n    });\n  });\n});\n\n// Endpoint to verify OTP\napp.post('/verify-otp', (req, res) => {\n  const {\n    mobile_no,\n    otp\n  } = req.body;\n\n  // Verify OTP\n  if (otpStore[mobile_no] && otpStore[mobile_no] === otp) {\n    delete otpStore[mobile_no]; // Clear OTP after successful verification\n    res.json({\n      success: true,\n      message: 'OTP verified successfully'\n    });\n  } else {\n    res.json({\n      success: false,\n      message: 'Invalid OTP'\n    });\n  }\n});\n\n// Signup route (final step after OTP verification)\napp.post('/signup', (req, res) => {\n  const {\n    full_name,\n    mobile_no,\n    email,\n    password\n  } = req.body;\n  const sql = \"INSERT INTO login (`full_name`, `mobile_no`, `email`, `password`) VALUES (?)\";\n  const values = [full_name, mobile_no, email, password];\n  db.query(sql, [values], (err, data) => {\n    if (err) {\n      console.error('Error executing query:', err);\n      return res.json({\n        success: false,\n        message: 'Error during signup'\n      });\n    }\n    return res.json({\n      success: true,\n      message: 'User signed up successfully'\n    });\n  });\n});\n\n// Start the server\napp.listen(4000, () => {\n  console.log('Server is running on port 4000');\n});","map":{"version":3,"names":["express","require","mysql","cors","bodyParser","twilio","app","use","json","accountSid","authToken","client","db","createConnection","host","user","password","database","connect","err","console","error","log","otpStore","post","req","res","mobile_no","body","otp","Math","floor","random","messages","create","from","to","then","message","sid","success","catch","full_name","email","sql","values","query","data","listen"],"sources":["C:/Development/login/frontend/src/signup.js"],"sourcesContent":["const express = require('express');\r\nconst mysql = require('mysql2');\r\nconst cors = require('cors');\r\nconst bodyParser = require('body-parser');\r\nconst twilio = require('twilio');\r\nconst app = express();\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// Twilio configuration\r\nconst accountSid = 'your_twilio_account_sid';\r\nconst authToken = 'your_twilio_auth_token';\r\nconst client = twilio(accountSid, authToken);\r\n\r\n// Create database connection\r\nconst db = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: '',\r\n  database: 'signup'\r\n});\r\n\r\n// Connect to the database\r\ndb.connect((err) => {\r\n  if (err) {\r\n    console.error('Database connection error:', err);\r\n    return;\r\n  }\r\n  console.log('Connected to the database');\r\n});\r\n\r\n// Store OTP in memory (for simplicity, use a better approach in production)\r\nlet otpStore = {};\r\n\r\n// Endpoint to request OTP\r\napp.post('/request-otp', (req, res) => {\r\n  const { mobile_no } = req.body;\r\n\r\n  // Generate random OTP\r\n  const otp = Math.floor(100000 + Math.random() * 900000);\r\n\r\n  // Save OTP for verification\r\n  otpStore[mobile_no] = otp;\r\n\r\n  // Send OTP via Twilio\r\n  client.messages.create({\r\n    body: `Your OTP code is ${otp}`,\r\n    from: 'your_twilio_phone_number',\r\n    to: mobile_no\r\n  })\r\n    .then((message) => {\r\n      console.log('OTP sent', message.sid);\r\n      res.json({ success: true, message: 'OTP sent successfully' });\r\n    })\r\n    .catch((err) => {\r\n      console.error('Error sending OTP:', err);\r\n      res.json({ success: false, message: 'Error sending OTP' });\r\n    });\r\n});\r\n\r\n// Endpoint to verify OTP\r\napp.post('/verify-otp', (req, res) => {\r\n  const { mobile_no, otp } = req.body;\r\n\r\n  // Verify OTP\r\n  if (otpStore[mobile_no] && otpStore[mobile_no] === otp) {\r\n    delete otpStore[mobile_no]; // Clear OTP after successful verification\r\n    res.json({ success: true, message: 'OTP verified successfully' });\r\n  } else {\r\n    res.json({ success: false, message: 'Invalid OTP' });\r\n  }\r\n});\r\n\r\n// Signup route (final step after OTP verification)\r\napp.post('/signup', (req, res) => {\r\n  const { full_name, mobile_no, email, password } = req.body;\r\n\r\n  const sql = \"INSERT INTO login (`full_name`, `mobile_no`, `email`, `password`) VALUES (?)\";\r\n  const values = [full_name, mobile_no, email, password];\r\n\r\n  db.query(sql, [values], (err, data) => {\r\n    if (err) {\r\n      console.error('Error executing query:', err);\r\n      return res.json({ success: false, message: 'Error during signup' });\r\n    }\r\n    return res.json({ success: true, message: 'User signed up successfully' });\r\n  });\r\n});\r\n\r\n// Start the server\r\napp.listen(4000, () => {\r\n  console.log('Server is running on port 4000');\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC/B,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,UAAU,GAAGH,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMK,GAAG,GAAGN,OAAO,CAAC,CAAC;AAErBM,GAAG,CAACC,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC;AACfG,GAAG,CAACC,GAAG,CAACH,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACA,MAAMC,UAAU,GAAG,yBAAyB;AAC5C,MAAMC,SAAS,GAAG,wBAAwB;AAC1C,MAAMC,MAAM,GAAGN,MAAM,CAACI,UAAU,EAAEC,SAAS,CAAC;;AAE5C;AACA,MAAME,EAAE,GAAGV,KAAK,CAACW,gBAAgB,CAAC;EAChCC,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACAL,EAAE,CAACM,OAAO,CAAEC,GAAG,IAAK;EAClB,IAAIA,GAAG,EAAE;IACPC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEF,GAAG,CAAC;IAChD;EACF;EACAC,OAAO,CAACE,GAAG,CAAC,2BAA2B,CAAC;AAC1C,CAAC,CAAC;;AAEF;AACA,IAAIC,QAAQ,GAAG,CAAC,CAAC;;AAEjB;AACAjB,GAAG,CAACkB,IAAI,CAAC,cAAc,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACrC,MAAM;IAAEC;EAAU,CAAC,GAAGF,GAAG,CAACG,IAAI;;EAE9B;EACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,MAAM,GAAGD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC;;EAEvD;EACAT,QAAQ,CAACI,SAAS,CAAC,GAAGE,GAAG;;EAEzB;EACAlB,MAAM,CAACsB,QAAQ,CAACC,MAAM,CAAC;IACrBN,IAAI,EAAE,oBAAoBC,GAAG,EAAE;IAC/BM,IAAI,EAAE,0BAA0B;IAChCC,EAAE,EAAET;EACN,CAAC,CAAC,CACCU,IAAI,CAAEC,OAAO,IAAK;IACjBlB,OAAO,CAACE,GAAG,CAAC,UAAU,EAAEgB,OAAO,CAACC,GAAG,CAAC;IACpCb,GAAG,CAAClB,IAAI,CAAC;MAAEgC,OAAO,EAAE,IAAI;MAAEF,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC/D,CAAC,CAAC,CACDG,KAAK,CAAEtB,GAAG,IAAK;IACdC,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEF,GAAG,CAAC;IACxCO,GAAG,CAAClB,IAAI,CAAC;MAAEgC,OAAO,EAAE,KAAK;MAAEF,OAAO,EAAE;IAAoB,CAAC,CAAC;EAC5D,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACAhC,GAAG,CAACkB,IAAI,CAAC,aAAa,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACpC,MAAM;IAAEC,SAAS;IAAEE;EAAI,CAAC,GAAGJ,GAAG,CAACG,IAAI;;EAEnC;EACA,IAAIL,QAAQ,CAACI,SAAS,CAAC,IAAIJ,QAAQ,CAACI,SAAS,CAAC,KAAKE,GAAG,EAAE;IACtD,OAAON,QAAQ,CAACI,SAAS,CAAC,CAAC,CAAC;IAC5BD,GAAG,CAAClB,IAAI,CAAC;MAAEgC,OAAO,EAAE,IAAI;MAAEF,OAAO,EAAE;IAA4B,CAAC,CAAC;EACnE,CAAC,MAAM;IACLZ,GAAG,CAAClB,IAAI,CAAC;MAAEgC,OAAO,EAAE,KAAK;MAAEF,OAAO,EAAE;IAAc,CAAC,CAAC;EACtD;AACF,CAAC,CAAC;;AAEF;AACAhC,GAAG,CAACkB,IAAI,CAAC,SAAS,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAChC,MAAM;IAAEgB,SAAS;IAAEf,SAAS;IAAEgB,KAAK;IAAE3B;EAAS,CAAC,GAAGS,GAAG,CAACG,IAAI;EAE1D,MAAMgB,GAAG,GAAG,8EAA8E;EAC1F,MAAMC,MAAM,GAAG,CAACH,SAAS,EAAEf,SAAS,EAAEgB,KAAK,EAAE3B,QAAQ,CAAC;EAEtDJ,EAAE,CAACkC,KAAK,CAACF,GAAG,EAAE,CAACC,MAAM,CAAC,EAAE,CAAC1B,GAAG,EAAE4B,IAAI,KAAK;IACrC,IAAI5B,GAAG,EAAE;MACPC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;MAC5C,OAAOO,GAAG,CAAClB,IAAI,CAAC;QAAEgC,OAAO,EAAE,KAAK;QAAEF,OAAO,EAAE;MAAsB,CAAC,CAAC;IACrE;IACA,OAAOZ,GAAG,CAAClB,IAAI,CAAC;MAAEgC,OAAO,EAAE,IAAI;MAAEF,OAAO,EAAE;IAA8B,CAAC,CAAC;EAC5E,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACAhC,GAAG,CAAC0C,MAAM,CAAC,IAAI,EAAE,MAAM;EACrB5B,OAAO,CAACE,GAAG,CAAC,gCAAgC,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}